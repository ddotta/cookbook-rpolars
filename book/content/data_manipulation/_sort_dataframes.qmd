## Sort a DataFrame

### Simply sort a DataFrame

The `sort()` method with a character vector can be used to sort a `DataFrame`.

::: {.panel-tabset}
## polars

```{r}
#| label: sort-dataframe-polars
# Sort by one column
as_polars_df(iris)$
  sort("Species")$
  head(3)
# Sort by two columns
as_polars_df(iris)$
  sort(c("Species","Petal.Length"))$
  head(3)
# Sort by two columns one in a decreasing manner and the other in an increasing manner
as_polars_df(iris)$
  sort(c("Species","Petal.Length"), descending = c(TRUE,FALSE))$
  head(3)
```

## R base

```{r}
#| label: sort-dataframe-rbase
# Sort by one column
iris[order(iris$Species),][1:3,]
# Sort by two columns
iris[order(iris$Species,iris$Petal.Length),][1:3,]
# Sort by two columns one in a decreasing manner and the other in an increasing manner
iris[order(rev(iris$Species),iris$Petal.Length),][1:3,]
```

## dplyr

```{r}
#| label: sort-dataframe-dplyr
# Sort by one column
iris |>
  arrange(Species) |>
  head(3)
# Sort by two columns
iris |>
  arrange(Species, Petal.Length) |>
  head(3)
# Sort by two columns one in a decreasing manner and the other in an increasing manner
iris |>
  arrange(desc(Species), Petal.Length) |>
  head(3)
```

## data.table

```{r}
#| label: sort-dataframe-datatable
# Sort by one column
iris_dt[order(Species)][1:3,]
# Sort by two columns
iris_dt[order(Species,Petal.Length)][1:3,]
# Sort by two columns one in a decreasing manner and the other in an increasing manner
iris_dt[order(-Species,Petal.Length)][1:3,]
```
:::

### Keep unique rows

If you want to keep unique/distinct rows from a `DataFrame`, you can use the `unique()` method:

::: {.panel-tabset}
## polars

```{r}
#| label: unique-rows-dataframe-polars

# With one column
as_polars_df(iris)$unique(
  subset = "Species"
)
# With one column keeping last entry
as_polars_df(iris)$unique(
  subset = "Species",
  keep = "last"
)
# With two colums, keeping last entry and maintaining the same order
pl$DataFrame(
  x = c(1L, 1:3, 3L),
  y = c(1L, 1:3, 3L),
  z = c(1L, 1:3, 4L)
)$unique(
  subset = c("x","y"),
  keep = "last",
  maintain_order = TRUE
)
```

## R base

```{r}
#| label: unique-rows-dataframe-rbase
# With one column
aggregate(. ~ Species, data = iris, FUN = head, N = 1)
# With one column keeping last entry
aggregate(. ~ Species, data = iris, FUN = tail, n = 1)
# With two colums, keeping last entry and maintaining the same order
mytest <- data.frame(
  x = c(1L, 1:3, 3L),
  y = c(1L, 1:3, 3L),
  z = c(1L, 1:3, 4L)
) 
aggregate(. ~ x + y, data = mytest, FUN = tail, n = 1)
```

## dplyr

```{r}
#| label: unique-rows-dataframe-dplyr
# With one column
iris |>
  distinct(Species, .keep_all = TRUE)
# With one column keeping last entry
iris |>
  group_by(Species) |>
  slice_tail() |>
  ungroup()
# With two colums, keeping last entry and maintaining the same order
data.frame(
  x = c(1L, 1:3, 3L),
  y = c(1L, 1:3, 3L),
  z = c(1L, 1:3, 4L)
) |>
  group_by(x,y) |>
  slice_tail() |>
  ungroup()
```

## data.table

```{r}
#| label: unique-rows-dataframe-datatable
# With one column
unique(iris_dt, by = "Species")
# With one column keeping last entry
unique(iris_dt, by = "Species", fromLast = TRUE)
# With two colums, keeping last entry and maintaining the same order
mytest_dt <- data.table(
  x = c(1L, 1:3, 3L),
  y = c(1L, 1:3, 3L),
  z = c(1L, 1:3, 4L)
) 
unique(mytest_dt, by = c("x","y"), fromLast = TRUE)
```
:::

### Keep some columns from sorted DataFrame

If you want to keep only some columns from a sorted `DataFrame`, you can use the `sort_by()` method with the `select()` method.  
In details, `sort_by()` can sort a column by the ordering of another column, or multiple other columns.  
It's the equivalent of `order()` method of R base.

::: {.panel-tabset}
## polars

```{r}
#| label: sort_by-dataframe-polars

as_polars_df(iris)$
  select(pl$col("Petal.Length")$
  sort_by("Petal.Width"))
```

## R base

```{r}
#| label: sort_by-dataframe-rbase
data(iris)
iris[order(iris$Petal.Width), "Petal.Length", drop = FALSE]
```

## dplyr

```{r}
#| label: sort_by-dataframe-dplyr

data(iris)
iris |>
  arrange(Petal.Width) |>
  select(Petal.Length)
```

## data.table

```{r}
#| label: sort_by-dataframe-datatable

data(iris)
iris_dt <- as.data.table(iris)
iris_dt[order(Petal.Width)][,.(Petal.Length)]
```
:::

::: {.callout-tip}
If you want to use multiple columns/expressions, you can pass it in a `list` like this for example `sort_by(list("Petal.Width","Sepal.Width"))` or `sort_by(list("Petal.Width", pl$col("Sepal.Width")))`
:::
