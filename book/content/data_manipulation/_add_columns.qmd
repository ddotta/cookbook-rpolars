## Modify/Add columns

### Modify existing column

Similar to the dplyr package, the `select()` method can also be used to **modify existing data**. However, the result will exclude any columns that were not specified in the expression.

For example, if we want to get in the data.frame iris the `Petal.Length` column rounded without decimals.

```{r}
#| label: select-round-select-polars
pl$DataFrame(iris)$select(
  pl$col("Petal.Length")$round(decimals = 0)
)$head(3) # display the first 3 lines
```

The problem here is that we would like to keep all the iris columns and not just `Petal.Length`.

Again, let's look at the official documentation:

> To modify or add some columns---whilst preserving all others in the dataset---it is therefore better to use the `with_columns()` method.

Note that the `with_columns()` method only accepts expressions.
Let's use it in an example:

::: {.panel-tabset}
## polars

```{r}
#| label: select-round-with_columns-polars
pl$DataFrame(iris)$with_columns(
  pl$col("Petal.Length")$round(decimals = 0)
)$head(3) # display the first 3 lines
```

## R base

```{r}
#| label: select-round-rbase
iris$Petal.Length <- round(iris$Petal.Length, digits = 0)
iris[1:3,]
```

## dplyr

```{r}
#| label: select-round-dplyr
data(iris)
iris |>
  mutate(Petal.Length = round(Petal.Length,0)) |>
  head(3)
```

## data.table

```{r}
#| label: select-round-datatable
iris_dt[,Petal.Length := round(Petal.Length, digits = 0)]
iris_dt[1:3,]
```
:::

### Add a new column

If you want to add a column to a data.frame, you use the same syntax as above with `with_columns()`. Simply use the `alias()` method to specify the name of the newly created column.

```{r}
#| label: select-round-alias-polars
pl$DataFrame(iris)$with_columns(
  pl$col("Petal.Length")$round(decimals = 0)$alias("Petal.Length.rounded")
)$head(3) # display the first 3 lines
```

### Add a new column with a constant value

If you need to **create a new column with a constant value** (i.e. the same value for all the rows in your DataFrame), you can use the literal `lit()` method. It works with the main types of Polars.

```{r}
#| label: lit-polars
pl$DataFrame(iris)$with_columns(
  pl$lit("toto")$alias("mynewcolumn")
)$head(3) # display the first 3 lines
```

### Add a new column based on conditions

To add new columns based on conditions, the `when-then-otherwise` expression must be used.

Here's the syntax:

```
pl$when(**Boolean Expression**)$
  then(**Value if True**)$
  otherwise(**Value if False)$
  alias(**New Column Name**)
```

Here's an example with equivalent syntax to help you understand:

::: {.panel-tabset}
## polars

```{r}
#| label: add-column-with-conditions-polars
pl$DataFrame(iris)$with_columns(
  pl$when(pl$col("Petal.Length") <= 2)$then(pl$lit("<=2"))$
    when(pl$col("Petal.Length") <= 5)$then(pl$lit("<=5"))$
    otherwise(pl$lit(">5"))$
    alias("mygroups")
# we only need to display 2 variables to check that it's OK
)$select(
  pl$col(c("Petal.Length","mygroups"))
)[c(1,2,59,150),]
```

## R base

```{r}
#| label: add-column-with-conditions-rbase
iris$mygroups <- ifelse(iris$Petal.Length <= 2, "<=2",
                        ifelse(iris$Petal.Length <= 5, "<=5", ">5"))
# we only need to display 2 variables to check that it's OK
iris[c(1,2,59,150), c("Petal.Length", "mygroups")]
```

## dplyr

```{r}
#| label: add-column-with-conditions-dplyr
iris |>
  mutate(
    mygroups = case_when(
      Petal.Length <=2 ~ "<=2",
      Petal.Length <=5 ~ "<=5",
      .default = ">5")
  ) |>
  # we only need to display 2 variables  to check that it's OK
  select(Petal.Length,mygroups) |>
  slice(1,2,59,150)
```

## data.table

```{r}
#| label: add-column-with-conditions-datatable
iris_dt[, mygroups := case_when(
  Petal.Length <= 2 ~ "<=2",
  Petal.Length <= 5 ~ "<=5",
  TRUE ~ ">5"
)]
# we only need to display 2 variables to check that it's OK
iris_dt[c(1,2,59,150), .(Petal.Length, mygroups)]
```
:::

### Add a new column by group

To add new columns by group, the `over` expression must be used.
This expression is similar to performing a groupby aggregation and joining the result back into the original dataframe.
Here's an example with equivalent syntax to help you understand:

```{r}
#| label: creation-example-add-column-by-group

df <- data.frame(
  name = c("X","X","Y","Y","Z","Z"),
  adress = c("A","B","C","D","E","F"),
  col2 = c(2L,4L,1L,3L,4L,2L),
  col3 = c(5L,19L,17L,12L,11L,15L)
)
df
```


::: {.panel-tabset}
## polars

```{r}
#| label: add-column-by-group-polars
pl$DataFrame(df)$with_columns(
  pl$col("col3")$max()$over("name")$name$suffix("_max")
)
```

## R base

```{r}
#| label: add-column-by-group-rbase
result <- aggregate(col3 ~ name, data = df, FUN = max)
colnames(result) <- c("name", "col3_max")
merge(df, result, by = "name", all.x = TRUE)
```

## dplyr

```{r}
#| label: add-column-by-group-dplyr
df |>
  group_by(name) |>
  mutate(col3_max = max(col3))
```

## data.table

```{r}
#| label: add-column-by-group-datatable
dt <- as.data.table(df)
dt[, col3_max := max(col3), by = name]
dt
```
:::

::: {.callout-tip}
If you need to pass multiple column names in the `over` expression, you can either list them like this `over("name","adress")` or - more conveniently - use a character vector `over(c("name","adress"))`.
:::