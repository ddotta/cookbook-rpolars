## Filter rows

The first option to filter rows of a DataFrame is to use square brackets `[]` indexing (with integer row number). 

```{r}
#| label: filter-square-brackets-polars
data(iris)
# The first four lines
pl$DataFrame(iris)[1:4,]
# The lines 1, 3 and 5
pl$DataFrame(iris)[c(1,3,5),]
```

::: {.callout-important}
It's convenient when you have to quickly inspect your data. But you'll quickly be limited by the square brackets, as they don't accept conditions with the expressions. For example `pl$DataFrame(iris)[Petal.Length > 6]` doesn't work.
:::

The second and best option is to use the `filter()` method. It must be used with the `Polars expression`, here the `col()` method which allows to designate the columns on which the filter condition will be applied.  

Let's see in details what's inside a `filter()` method with an example:  

- `pl$col("Petal.Length")`: this expression selects the `Petal.Length` column from iris;  
- `>6`: applies a Boolean condition to this expression (for all Petals that have a length > 6).  

In the example below, we will use `&` operator to apply multiple conditions in `filter()` method:

::: {.panel-tabset}
## polars

```{r}
#| label: filter-polars
pl$DataFrame(iris)$filter(
  pl$col("Petal.Length") > 6 & pl$col("Petal.Width") < 2)
```

## R base

```{r}
#| label: filter-rbase
iris[iris$Petal.Length > 6 & iris$Petal.Width < 2,] # here don't forget the comma
```

## dplyr

```{r}
#| label: filter-dplyr
iris |>
  filter(Petal.Length > 6 & Petal.Width < 2) 
```

## data.table

```{r}
#| label: filter-datatable
iris_dt[Petal.Length > 6 & Petal.Width < 2]
```
:::

::: {.callout-tip}
The equivalent of `%in%` R operator is the `is_in()` method. It should be used in association with the `lit()` method.

```{r}
#| label: example-is_in
pl$DataFrame(
  colA = pl$Series(c("a","b","c"))
  )$filter(
  pl$col("colA")$is_in(pl$lit(c("a","b")))
  )
```
:::

Another reason for using the `filter()` method is that filter expressions can be optimised in [lazy mode](#introduction-to-lazy-mode) by the query optimiser. Square brackets `[]` can only be used in **eager mode**.  

::: {.callout-tip}
There is another way **to speed up filter processing on rows**: tell polars that the column(s) used to filter rows are already sorted! To do this, you can use the `set_sorted()` method.   
Here's an example:

```{r}
#| label: speed-up-filter-rows

mydf <- pl$DataFrame(
  col1 = pl$Series(sort(runif(10000000)))
)

microbenchmark(
  "Without telling col1 is sorted" = mydf$filter(pl$col("col1") < 100),
  "Telling col1 is sorted" = mydf$with_columns(pl$col("col1")$set_sorted())$filter(pl$col("col1") < 100)
  )
```
:::