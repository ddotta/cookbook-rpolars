## Export data to csv files

The `write_csv()` method can be used to write to comma-separated values (csv) file.  

See [here](https://pola-rs.github.io/r-polars/man/IO_write_csv.html) for full function syntax.  

```{r}
#| label: export-csv

destination = tempfile(fileext = ".csv")
as_polars_df(iris)$write_csv(destination)
file.exists(destination)
```

## Export data to Parquet files

The `write_parquet()` method can be used to write to Parquet file.  

See [here](https://pola-rs.github.io/r-polars/man/IO_write_parquet.html) for full function syntax.  

You can write data to a single Parquet file...    

```{r}
#| label: export-single-parquet

destination = tempfile(fileext = ".parquet")
as_polars_df(iris)$write_parquet(destination)
file.exists(destination)
```

...And you can write to folder with a hive-partitioned structure   

```{r}
#| label: export-multiple-parquet

destination = tempfile(fileext = ".parquet")
as_polars_df(iris)$write_parquet(destination, partition_by = c("Species"))
list.files(destination, recursive = TRUE)
```

## Export data to json/ndjson files

The `write_json()` and `write_ndjson()` methods can be used to write to json/ndjson files.  

See [here](https://pola-rs.github.io/r-polars/man/IO_write_json.html) or [here](https://pola-rs.github.io/r-polars/man/IO_write_ndjson.html) for full function syntax.  

For a json file:  

```{r}
#| label: export-json

destination = tempfile(fileext = ".json")
as_polars_df(iris)$write_json(destination)
file.exists(destination)
```
For a ndjson file:  

```{r}
#| label: export-ndjson

destination = tempfile(fileext = ".ndjson")
as_polars_df(iris)$write_ndjson(destination)
file.exists(destination)
```

## Export data to Excel

As with Python, there are no native method in Rust for **exporting to Excel format**.

The **best current solution** is to use the [data.frame conversion method](#from-seriesdataframes-to-vectordata.frames) and then use the [{openxlsx}](https://ycphs.github.io/openxlsx/index.html) package or one of its [{tablexlsx}](https://ddotta.github.io/tablexlsx/) wrapper to export these DataFrames in xlsx format. The more recent[{openxlxs2}](https://github.com/JanMarvin/openxlsx2) package is also a great tool for exporting to xlsx files.

Let's look at the syntax of a simple export with theses 3 packages:

::: {.panel-tabset}

## openxlsx

```{r}
#| label: export-openxlsx
#| eval: false

# install.packages("openxlsx")
library(openxlsx)

openxlsx::write.xlsx(
    iris,
    file = tempdir()
)
```

## tablexlsx

```{r}
#| label: export-tablexlsx
#| eval: false

# install.packages("tablexlsx")
library(tablexlsx)

iris |> toxlsx(path = tempdir())
```

## openxlsx2

```{r}
#| label: export-openxlsx2
#| eval: false

# install.packages("openxlsx2")
library(openxlsx2)

openxlsx2::write_xlsx(
    iris,
    file = tempdir()
)
```
:::