## `Lazy` vs `eager` mode comparison

### General principles

In this first example we use the **eager API**:

```{r}
#| label: eager-query-steps
df <- pl$read_csv("examples/iris.csv")
df_small = df$filter(pl$col("Petal.Length") > 5)
df_agg = df_small$group_by("Species")$agg(pl$col("Petal.Width")$median())
df_agg
```

This example:

- Read the iris dataset.
- Filter the dataset based on Petal.Length
- Calculate the median of the Petal.Width per Species

**Every step is executed immediately returning the intermediate results**. This can be very **wastefull** as we might do work or load extra data that is not being used.
If we instead used the **lazy API** and waited on execution untill all the steps are defined then the query planner could perform various optimizations. In this case:

- `Predicate pushdown`: Apply filters as early as possible while reading the dataset, thus only reading rows with sepal length greater than 5.
- `Projection pushdown`: Select only the columns that are needed while reading the dataset, thus removing the need to load additional columns

::: {.callout-tip}
To consult the list of **optimisations** made by `Polars` on queries in **lazy mode**, see [this page](https://pola-rs.github.io/polars-book/user-guide/lazy/optimizations/)..
:::

Here is the equivalent code using the lazy API. At the end of the query, don't forget to use the `collect()` method to inform Polars that you want to execute it.

```{r}
#| label: lazy-query-steps

pl$scan_csv("examples/iris.csv")$
  filter(
    pl$col("Petal.Length") > 5)$
  group_by("Species")$
  agg(pl$col("Petal.Width")$median())$
  collect() # <- don't forget collect() here!
```

::: {.callout-important}
Use **lazy execution** will signficantly lower the load on memory & CPU thus allowing you to fit bigger datasets in memory and process faster.
:::

The next section will demonstrate this time saving. ðŸ‘‡


### Limits of lazy mode

There are some operations that cannot be performed in lazy mode (whether in polars or other lazy frameworks such as SQL database). One limitation is that Polars needs to know the column names and dtypes at each step of the query plan.

For example, we can't `pivot()` (see [here](#pivot-a-dataframe)) in lazy mode as the column names are data-dependant following a pivot. Indeed, when you have to `pivot()` a `DataFrame` your future columns names cannot be predicted because it depends on what it is actually in your datasets!

When you have to do operations that can be done in lazy mode, the recommandation is:
- Running your query in lazy mode as far as possible;
- Evaluating this lazy query with `collect()` when you need a non-lazy method;
- Running the non-lazy methods;
- Calling `lazy()` on the output to continue in lazy mode.

Here's an example:

```{r}
#| label: query-lazy-then-eager

pl$scan_parquet("Datasets/fakir_file.parquet")$
  # Call collect() because I need to pivot()
  collect()$
  pivot(
    index = "region",
    columns = "priority",
    values = "age",
    aggregate_function = "mean"
  )$
  # Continue in lazy mode
  lazy()$
  select(
    pl$col(c("region","Gold","Platinium"))
  )$
  collect()
```





