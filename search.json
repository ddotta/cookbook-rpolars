[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cookbook Polars for R",
    "section": "",
    "text": "Preface\nWelcome to the Polars cookbook for R users. The goal of the cookbook is to provide solutions to common tasks and problems in using Polars with R. It allows R users using their usual packages to quickly get the syntax required to use Polars with R.\nIt is structured around side-by-side comparisons between polars, dplyr and data.table.\nThis book is not a substitute for the official documentation of the rpolars project which is the definitive reference on the subject. It is simply intended to illustrate my use of Polars with R and can be a complementary to the official Polars documentation."
  },
  {
    "objectID": "index.html#what-is-polars",
    "href": "index.html#what-is-polars",
    "title": "Cookbook Polars for R",
    "section": "What is Polars ?",
    "text": "What is Polars ?\nPolars is a very fast and elegant dataframe library that does the same sort of thing as the main data manipulation packages in R including dplyr and data.table.\nMost of this book is structured examples of Polars, dplyr and data.table idiomatic code, with comments on the API and performance of the three."
  },
  {
    "objectID": "index.html#who-is-this-for",
    "href": "index.html#who-is-this-for",
    "title": "Cookbook Polars for R",
    "section": "Who is this for?",
    "text": "Who is this for?\nThis is not a beginner’s introduction to data programming, though you certainly don’t need to be an expert to read it. If you have some familiarity with any dataframe library, most of the examples should make sense, but if you’re familiar with dplyr or data.table they’ll make even more sense because all the Polars code is accompanied by the equivalent code.\nFor users of Python and in particular Pandas, you can consult this excellent book which was the inspiration for the one you are reading now."
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "Cookbook Polars for R",
    "section": "Contributing",
    "text": "Contributing\nThis book is free and open source, so please do open an issue if you notice a problem!"
  },
  {
    "objectID": "first_steps.html",
    "href": "first_steps.html",
    "title": "1  First steps with Polars and R",
    "section": "",
    "text": "First of all we need to install all the packages and create an big random dataset needed for this book to work, so don’t bother with the following code:\n\n\nCode\n# Installation of packages for cookbook-rpolars\ninstall.packages(c('dplyr','data.table','arrow','fakir'),dependencies = TRUE)\n\n# Loading packages\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(arrow)\nlibrary(fakir)\n\n# Creation the \"Datasets\" folder\ndir.create(normalizePath(\"Datasets\"))\n\n# Creation of large example dataset\nwrite_parquet(\n  x = fake_ticket_client(vol = 1000),\n  sink = normalizePath(\"Datasets/example_data.parquet\"))\n\n# Creation of iris_dt\niris_dt &lt;- as.data.table(iris)\n\n\nUntil the R polars package is uploaded to CRAN, the polars package development team offers several solutions for installation.\nThe most practical one in my opinion at the moment is to use R-universe and install like this:\n\ninstall.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\nlibrary(polars)\n\nPolars’ main functions are stored in the “pl” namespace and can be accessed using the “pl$” prefix to prevent conflicts with other packages and base R function names.\nFirst example to convert the most famous R data frame (iris) to a Polars DataFrame:\n\niris_polars &lt;- pl$DataFrame(iris)\niris_polars\n\nshape: (150, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡\n│ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │\n│ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │\n│ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │\n│ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │\n│ …            ┆ …           ┆ …            ┆ …           ┆ …         │\n│ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │\n│ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │\n│ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │\n│ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │\n└──────────────┴─────────────┴──────────────┴─────────────┴───────────┘\n\n\nFor example, to count the number of lines of the iris data frame :\n\npolarsR base\n\n\n\n# With pl$ prefix\npl$DataFrame(iris)$height\n\n[1] 150\n\n# Using iris_polars\niris_polars$height\n\n[1] 150\n\n\n\n\n\nnrow(iris)\n\n[1] 150\n\n\n\n\n\nTo select the first 5 iris rows and the Petal.Length and Species columns, syntax is identical between Polars and R base:\n\npolarsR basedplyrdata.table\n\n\n\niris_polars[1:5, c(\"Petal.Length\", \"Species\")]\n\nshape: (5, 2)\n┌──────────────┬─────────┐\n│ Petal.Length ┆ Species │\n│ ---          ┆ ---     │\n│ f64          ┆ cat     │\n╞══════════════╪═════════╡\n│ 1.4          ┆ setosa  │\n│ 1.4          ┆ setosa  │\n│ 1.3          ┆ setosa  │\n│ 1.5          ┆ setosa  │\n│ 1.4          ┆ setosa  │\n└──────────────┴─────────┘\n\n\n\n\n\niris[1:5, c(\"Petal.Length\", \"Species\")]\n\n  Petal.Length Species\n1          1.4  setosa\n2          1.4  setosa\n3          1.3  setosa\n4          1.5  setosa\n5          1.4  setosa\n\n\n\n\n\niris |&gt; \n  slice(1:5) |&gt; \n  select(Petal.Length,Species)\n\n  Petal.Length Species\n1          1.4  setosa\n2          1.4  setosa\n3          1.3  setosa\n4          1.5  setosa\n5          1.4  setosa\n\n\n\n\n\niris_dt[1:5, .(Petal.Length, Species)]\n\n   Petal.Length Species\n1:          1.4  setosa\n2:          1.4  setosa\n3:          1.3  setosa\n4:          1.5  setosa\n5:          1.4  setosa\n\n\n\n\n\nIf you have read this far and managed to reproduce the examples, congratulations! You are ready to dive into the deep end of Polars with R in the next parts of this cookbook!"
  },
  {
    "objectID": "data_manipulation.html#series-and-vectors",
    "href": "data_manipulation.html#series-and-vectors",
    "title": "2  Data manipulation",
    "section": "2.1 Series and vectors",
    "text": "2.1 Series and vectors\nIn polars objects, Series object are like R vectors.\n\npolarsR base\n\n\n\nmynumbers_serie &lt;- pl$Series(1:3)\nmyletters_serie &lt;- pl$Series(c(\"a\",\"b\",\"c\"))\n\n\n\n\nmynumbers_vector &lt;- 1:3\nmyletters_vector &lt;- c(\"a\",\"b\",\"c\")"
  },
  {
    "objectID": "data_manipulation.html#dataframe-and-data.frame",
    "href": "data_manipulation.html#dataframe-and-data.frame",
    "title": "2  Data manipulation",
    "section": "2.2 DataFrame and data.frame",
    "text": "2.2 DataFrame and data.frame\nIn polars objects, Series object are like R vectors and close to a tibble and a data.table object.\n\npolarsR basedplyrdata.table\n\n\n\n# Creation of a DataFrame object with Series\nmydf &lt;- pl$DataFrame(\n  col1 = mynumbers_serie,\n  col2 = myletters_serie\n)\n# Creation of a DataFrame object with Series and vectors\npl$DataFrame(\n  col1 = mynumbers_serie,\n  col2 = myletters_vector\n)\n\nshape: (3, 2)\n┌──────┬──────┐\n│ col1 ┆ col2 │\n│ ---  ┆ ---  │\n│ i32  ┆ str  │\n╞══════╪══════╡\n│ 1    ┆ a    │\n│ 2    ┆ b    │\n│ 3    ┆ c    │\n└──────┴──────┘\n\n\n\n\n\ndata.frame(\n  col1 = mynumbers_vector,\n  col2 = myletters_vector\n)\n\n  col1 col2\n1    1    a\n2    2    b\n3    3    c\n\n\n\n\n\ntibble(\n  col1 = mynumbers_vector,\n  col2 = myletters_vector\n)\n\n# A tibble: 3 × 2\n   col1 col2 \n  &lt;int&gt; &lt;chr&gt;\n1     1 a    \n2     2 b    \n3     3 c    \n\n\n\n\n\ndata.table(\n  col1 = mynumbers_vector,\n  col2 = myletters_vector\n)\n\n   col1 col2\n1:    1    a\n2:    2    b\n3:    3    c"
  },
  {
    "objectID": "data_manipulation.html#manipulation-of-series-and-dataframes-with-r-standard-functions",
    "href": "data_manipulation.html#manipulation-of-series-and-dataframes-with-r-standard-functions",
    "title": "2  Data manipulation",
    "section": "2.3 Manipulation of Series and DataFrames with R standard functions",
    "text": "2.3 Manipulation of Series and DataFrames with R standard functions\nSeries and DataFrames can be manipulated with a lot of standard R functions.\n\nsum(mynumbers_serie)\n\n[1] 6\n\npaste(myletters_serie,collapse = \"\")\n\n[1] \"abc\"\n\n\n\nnames(mydf)\n\n[1] \"col1\" \"col2\"\n\nncol(mydf)\n\n[1] 2"
  },
  {
    "objectID": "data_manipulation.html#methods",
    "href": "data_manipulation.html#methods",
    "title": "2  Data manipulation",
    "section": "2.4 Methods",
    "text": "2.4 Methods\nThe added value of Polars consists in the methods. Those powerful methods are accessed using the $ operator.\n\nmynumbers_serie$sum()\n\n[1] 6\n\n# To convert Polars Series to vector\nmyletters_serie$to_vector()\n\n[1] \"a\" \"b\" \"c\"\n\n\n\nmydf$columns\n\n[1] \"col1\" \"col2\"\n\nlength(mydf$columns)\n\n[1] 2\n\n# To convert DataFrames to data.frames\nmydf$to_data_frame()\n\n  col1 col2\n1    1    a\n2    2    b\n3    3    c\n\n\nPolars includes a very useful chaining method in data manipulation operations. From this point of view, Polars is more like dplyr and data.table. This is how the chaining method is defined in the official documentation:\n\nIn polars our method chaining syntax takes the form object$m1()$m2(), where object is our data object, and m1() and m2() are appropriate methods, like subsetting or aggregation expressions.\n\nLet’s see an example with the iris dataset:\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$groupby(\n  \"Species\")$median()  \n\nshape: (3, 5)\n┌────────────┬──────────────┬─────────────┬──────────────┬─────────────┐\n│ Species    ┆ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width │\n│ ---        ┆ ---          ┆ ---         ┆ ---          ┆ ---         │\n│ cat        ┆ f64          ┆ f64         ┆ f64          ┆ f64         │\n╞════════════╪══════════════╪═════════════╪══════════════╪═════════════╡\n│ setosa     ┆ 5.0          ┆ 3.4         ┆ 1.5          ┆ 0.2         │\n│ versicolor ┆ 5.9          ┆ 2.8         ┆ 4.35         ┆ 1.3         │\n│ virginica  ┆ 6.5          ┆ 3.0         ┆ 5.55         ┆ 2.0         │\n└────────────┴──────────────┴─────────────┴──────────────┴─────────────┘\n\n\n\n\n\naggregate(. ~ Species, iris, median)\n\n     Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     setosa          5.0         3.4         1.50         0.2\n2 versicolor          5.9         2.8         4.35         1.3\n3  virginica          6.5         3.0         5.55         2.0\n\n\n\n\n\niris |&gt;\n  group_by(Species) |&gt;\n  summarise(across(everything(),median))\n\n# A tibble: 3 × 5\n  Species    Sepal.Length Sepal.Width Petal.Length Petal.Width\n  &lt;fct&gt;             &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1 setosa              5           3.4         1.5          0.2\n2 versicolor          5.9         2.8         4.35         1.3\n3 virginica           6.5         3           5.55         2  \n\n\n\n\n\niris_dt[, lapply(.SD, median), by = Species]\n\n      Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1:     setosa          5.0         3.4         1.50         0.2\n2: versicolor          5.9         2.8         4.35         1.3\n3:  virginica          6.5         3.0         5.55         2.0\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn the Polars code used above, you will notice thatwe have introduced line breaks. We could have written the whole code on the same line but for the sake of readability I prefer to separate the methods used by line breaks."
  },
  {
    "objectID": "data_manipulation.html#common-data-manipulation-methods",
    "href": "data_manipulation.html#common-data-manipulation-methods",
    "title": "2  Data manipulation",
    "section": "2.5 Common data manipulation methods",
    "text": "2.5 Common data manipulation methods\n\n2.5.1 Method filter\nThe filter() method is used to filter the rows of a DataFrame. It must be used with the col() method which allows to designate the columns on which the filter condition will be applied.\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$filter(\n  pl$col(\"Petal.Length\") &gt; 6 & pl$col(\"Petal.Width\") &lt; 2)\n\nshape: (2, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡\n│ 7.3          ┆ 2.9         ┆ 6.3          ┆ 1.8         ┆ virginica │\n│ 7.4          ┆ 2.8         ┆ 6.1          ┆ 1.9         ┆ virginica │\n└──────────────┴─────────────┴──────────────┴─────────────┴───────────┘\n\n\n\n\n\niris[iris$Petal.Length &gt; 6 & iris$Petal.Width &lt; 2,] # here don't forget the comma\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n108          7.3         2.9          6.3         1.8 virginica\n131          7.4         2.8          6.1         1.9 virginica\n\n\n\n\n\niris |&gt;\n  filter(Petal.Length &gt; 6 & Petal.Width &lt; 2) \n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n1          7.3         2.9          6.3         1.8 virginica\n2          7.4         2.8          6.1         1.9 virginica\n\n\n\n\n\niris_dt[Petal.Length &gt; 6 & Petal.Width &lt; 2]\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n1:          7.3         2.9          6.3         1.8 virginica\n2:          7.4         2.8          6.1         1.9 virginica\n\n\n\n\n\n\n\n2.5.2 Method select\nThe select() method is used to filter the rows of a DataFrame. It must be used with the col() method which allows to designate the columns to be selected.\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$select(\n  pl$col(c(\"Petal.Length\",\"Petal.Width\"))\n)$head(3) # display the first 3 lines\n\nshape: (3, 2)\n┌──────────────┬─────────────┐\n│ Petal.Length ┆ Petal.Width │\n│ ---          ┆ ---         │\n│ f64          ┆ f64         │\n╞══════════════╪═════════════╡\n│ 1.4          ┆ 0.2         │\n│ 1.4          ┆ 0.2         │\n│ 1.3          ┆ 0.2         │\n└──────────────┴─────────────┘\n\n\n\n\n\niris[1:3,c(\"Petal.Length\",\"Petal.Width\")] \n\n  Petal.Length Petal.Width\n1          1.4         0.2\n2          1.4         0.2\n3          1.3         0.2\n\n\n\n\n\niris |&gt;\n  select(Petal.Length,Petal.Width) |&gt;\n  head(3)\n\n  Petal.Length Petal.Width\n1          1.4         0.2\n2          1.4         0.2\n3          1.3         0.2\n\n\n\n\n\niris_dt[1:3,.(Petal.Length,Petal.Width)]\n\n   Petal.Length Petal.Width\n1:          1.4         0.2\n2:          1.4         0.2\n3:          1.3         0.2\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to obtain a result in an R data.frame, you can simply add the method to_data_frame() at the end of the method chaining."
  }
]