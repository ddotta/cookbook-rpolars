[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cookbook Polars for R",
    "section": "",
    "text": "Preface\nWelcome to the Polars cookbook for R users. The goal of the cookbook is to provide solutions to common tasks and problems in using Polars with R. It allows R users using their usual packages to quickly get the syntax required to use Polars with R.\nIt is structured around side-by-side comparisons between polars, dplyr and data.table.\nThis book is not a substitute for the official documentation of the rpolars project which is the definitive reference on the subject. It is simply intended to illustrate my use of Polars with R and can be a complementary to the official Polars documentation."
  },
  {
    "objectID": "index.html#what-is-polars",
    "href": "index.html#what-is-polars",
    "title": "Cookbook Polars for R",
    "section": "What is Polars ?",
    "text": "What is Polars ?\nPolars is a very fast and elegant dataframe library that does the same sort of thing as the main data manipulation packages in R including dplyr and data.table.\nMost of this book is structured examples of Polars, dplyr and data.table idiomatic code, with comments on the API and performance of the three."
  },
  {
    "objectID": "index.html#who-is-this-for",
    "href": "index.html#who-is-this-for",
    "title": "Cookbook Polars for R",
    "section": "Who is this for?",
    "text": "Who is this for?\nThis is not a beginner’s introduction to data programming, though you certainly don’t need to be an expert to read it. If you have some familiarity with any dataframe library, most of the examples should make sense, but if you’re familiar with dplyr or data.table they’ll make even more sense because all the Polars code is accompanied by the equivalent code.\nFor users of Python and in particular Pandas, you can consult this excellent book which was the inspiration for the one you are reading now."
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "Cookbook Polars for R",
    "section": "Contributing",
    "text": "Contributing\nThis book is free and open source, so please do open an issue if you notice a problem!"
  },
  {
    "objectID": "first_steps.html",
    "href": "first_steps.html",
    "title": "1  First steps with Polars and R",
    "section": "",
    "text": "First of all we need to install all the packages and create an big random dataset needed for this book to work, so don’t bother with the following code:\n\n\nCode\n# Installation of packages for cookbook-rpolars\ninstall.packages(c('dplyr','data.table','arrow','fakir'),dependencies = TRUE)\n\n# Loading packages\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(arrow)\nlibrary(fakir)\n\n# Creation the \"Datasets\" folder\ndir.create(normalizePath(\"Datasets\"))\n\n# Creation of large example dataset\nwrite_parquet(\n  x = fake_ticket_client(vol = 1000),\n  sink = normalizePath(\"Datasets/example_data.parquet\"))\n\n# Creation of iris_dt\niris_dt &lt;- as.data.table(iris)\n\n\nUntil the R polars package is uploaded to CRAN, the polars package development team offers several solutions for installation.\nThe most practical one in my opinion at the moment is to use R-universe and install like this:\n\ninstall.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\nlibrary(polars)\n\nPolars’ main functions are stored in the “pl” namespace and can be accessed using the “pl$” prefix to prevent conflicts with other packages and base R function names.\nFirst example to convert the most famous R data frame (iris) to a Polars DataFrame:\n\niris_polars &lt;- pl$DataFrame(iris)\niris_polars\n\nshape: (150, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡\n│ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │\n│ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │\n│ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │\n│ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │\n│ …            ┆ …           ┆ …            ┆ …           ┆ …         │\n│ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │\n│ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │\n│ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │\n│ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │\n└──────────────┴─────────────┴──────────────┴─────────────┴───────────┘\n\n\nFor example, to count the number of lines of the iris data frame :\n\npolarsR base\n\n\n\n# With pl$ prefix\npl$DataFrame(iris)$height\n\n[1] 150\n\n# Using iris_polars\niris_polars$height\n\n[1] 150\n\n\n\n\n\nnrow(iris)\n\n[1] 150\n\n\n\n\n\nTo select the first 5 iris rows and the Petal.Length and Species columns, syntax is identical between Polars and R base:\n\npolarsR basedplyrdata.table\n\n\n\niris_polars[1:5, c(\"Petal.Length\", \"Species\")]\n\nshape: (5, 2)\n┌──────────────┬─────────┐\n│ Petal.Length ┆ Species │\n│ ---          ┆ ---     │\n│ f64          ┆ cat     │\n╞══════════════╪═════════╡\n│ 1.4          ┆ setosa  │\n│ 1.4          ┆ setosa  │\n│ 1.3          ┆ setosa  │\n│ 1.5          ┆ setosa  │\n│ 1.4          ┆ setosa  │\n└──────────────┴─────────┘\n\n\n\n\n\niris[1:5, c(\"Petal.Length\", \"Species\")]\n\n  Petal.Length Species\n1          1.4  setosa\n2          1.4  setosa\n3          1.3  setosa\n4          1.5  setosa\n5          1.4  setosa\n\n\n\n\n\niris |&gt; \n  slice(1:5) |&gt; \n  select(Petal.Length,Species)\n\n  Petal.Length Species\n1          1.4  setosa\n2          1.4  setosa\n3          1.3  setosa\n4          1.5  setosa\n5          1.4  setosa\n\n\n\n\n\niris_dt[1:5, .(Petal.Length, Species)]\n\n   Petal.Length Species\n1:          1.4  setosa\n2:          1.4  setosa\n3:          1.3  setosa\n4:          1.5  setosa\n5:          1.4  setosa\n\n\n\n\n\nIf you have read this far and managed to reproduce the examples, congratulations! You are ready to dive into the deep end of Polars with R in the next parts of this cookbook!"
  },
  {
    "objectID": "data_manipulation.html#series-and-vectors",
    "href": "data_manipulation.html#series-and-vectors",
    "title": "2  Data manipulation",
    "section": "2.1 Series and vectors",
    "text": "2.1 Series and vectors\nIn polars objects, Series object are like R vectors.\nTo create a Polars Series from scratch:\n\npolarsR base\n\n\n\nmynumbers_serie &lt;- pl$Series(1:3)\nmyletters_serie &lt;- pl$Series(c(\"a\",\"b\",\"c\"))\n\n\n\n\nmynumbers_vector &lt;- 1:3\nmyletters_vector &lt;- c(\"a\",\"b\",\"c\")"
  },
  {
    "objectID": "data_manipulation.html#dataframe-and-data.frame",
    "href": "data_manipulation.html#dataframe-and-data.frame",
    "title": "2  Data manipulation",
    "section": "2.2 DataFrame and data.frame",
    "text": "2.2 DataFrame and data.frame\nIn polars objects, DataFrame object are like R vectors and close to a tibble and a data.table object.\nTo create a Polars DataFrame from scratch:\n\npolarsR basedplyrdata.table\n\n\n\n# Creation of a DataFrame object with Series\nmydf &lt;- pl$DataFrame(\n  col1 = mynumbers_serie,\n  col2 = myletters_serie\n)\n# Creation of a DataFrame object with Series and vectors\npl$DataFrame(\n  col1 = mynumbers_serie,\n  col2 = myletters_vector\n)\n\nshape: (3, 2)\n┌──────┬──────┐\n│ col1 ┆ col2 │\n│ ---  ┆ ---  │\n│ i32  ┆ str  │\n╞══════╪══════╡\n│ 1    ┆ a    │\n│ 2    ┆ b    │\n│ 3    ┆ c    │\n└──────┴──────┘\n\n\n\n\n\ndata.frame(\n  col1 = mynumbers_vector,\n  col2 = myletters_vector\n)\n\n  col1 col2\n1    1    a\n2    2    b\n3    3    c\n\n\n\n\n\ntibble(\n  col1 = mynumbers_vector,\n  col2 = myletters_vector\n)\n\n# A tibble: 3 × 2\n   col1 col2 \n  &lt;int&gt; &lt;chr&gt;\n1     1 a    \n2     2 b    \n3     3 c    \n\n\n\n\n\ndata.table(\n  col1 = mynumbers_vector,\n  col2 = myletters_vector\n)\n\n   col1 col2\n1:    1    a\n2:    2    b\n3:    3    c"
  },
  {
    "objectID": "data_manipulation.html#manipulation-of-series-and-dataframes-with-r-standard-functions",
    "href": "data_manipulation.html#manipulation-of-series-and-dataframes-with-r-standard-functions",
    "title": "2  Data manipulation",
    "section": "2.3 Manipulation of Series and DataFrames with R standard functions",
    "text": "2.3 Manipulation of Series and DataFrames with R standard functions\nSeries and DataFrames can be manipulated with a lot of standard R functions.\nSome examples with Series:\n\nsum(mynumbers_serie)\n\n[1] 6\n\npaste(myletters_serie,collapse = \"\")\n\n[1] \"abc\"\n\n\nSome examples with DataFrames:\n\nnames(mydf)\n\n[1] \"col1\" \"col2\"\n\nncol(mydf)\n\n[1] 2"
  },
  {
    "objectID": "data_manipulation.html#methods",
    "href": "data_manipulation.html#methods",
    "title": "2  Data manipulation",
    "section": "2.4 Methods",
    "text": "2.4 Methods\nThe added value of Polars consists in the methods. Those powerful methods are accessed using the $ operator.\n\nFor Series, see this section for the methods available in {polars}.\nFor DataFrames, see this section for the methods available in {polars}.\n\nSome examples with Series:\n\n# To get a sum\nmynumbers_serie$sum()\n\n[1] 6\n\n# To sort in descending order\nmynumbers_serie$sort(reverse = TRUE)\n\npolars Series: shape: (3,)\nSeries: 'col1' [i32]\n[\n    3\n    2\n    1\n]\n\n\nSome examples with DataFrame:\n\n# To get a character vector of column names\nmydf$columns\n\n[1] \"col1\" \"col2\"\n\n# To get dimensions of DataFrame\nmydf$shape\n\n[1] 3 2\n\n# We can mix standard R functions and methods\nlength(mydf$columns)\n\n[1] 2\n\n\nPolars includes a very useful chaining method in data manipulation operations. From this point of view, Polars is more like dplyr and data.table. This is how the chaining method is defined in the official documentation:\n\nIn polars our method chaining syntax takes the form object$m1()$m2(), where object is our data object, and m1() and m2() are appropriate methods, like subsetting or aggregation expressions.\n\nLet’s see an example with the iris dataset:\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$groupby(\n  \"Species\")$median()  \n\nshape: (3, 5)\n┌────────────┬──────────────┬─────────────┬──────────────┬─────────────┐\n│ Species    ┆ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width │\n│ ---        ┆ ---          ┆ ---         ┆ ---          ┆ ---         │\n│ cat        ┆ f64          ┆ f64         ┆ f64          ┆ f64         │\n╞════════════╪══════════════╪═════════════╪══════════════╪═════════════╡\n│ setosa     ┆ 5.0          ┆ 3.4         ┆ 1.5          ┆ 0.2         │\n│ versicolor ┆ 5.9          ┆ 2.8         ┆ 4.35         ┆ 1.3         │\n│ virginica  ┆ 6.5          ┆ 3.0         ┆ 5.55         ┆ 2.0         │\n└────────────┴──────────────┴─────────────┴──────────────┴─────────────┘\n\n\n\n\n\naggregate(. ~ Species, iris, median)\n\n     Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     setosa          5.0         3.4         1.50         0.2\n2 versicolor          5.9         2.8         4.35         1.3\n3  virginica          6.5         3.0         5.55         2.0\n\n\n\n\n\niris |&gt;\n  group_by(Species) |&gt;\n  summarise(across(everything(),median))\n\n# A tibble: 3 × 5\n  Species    Sepal.Length Sepal.Width Petal.Length Petal.Width\n  &lt;fct&gt;             &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1 setosa              5           3.4         1.5          0.2\n2 versicolor          5.9         2.8         4.35         1.3\n3 virginica           6.5         3           5.55         2  \n\n\n\n\n\niris_dt[, lapply(.SD, median), by = Species]\n\n      Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1:     setosa          5.0         3.4         1.50         0.2\n2: versicolor          5.9         2.8         4.35         1.3\n3:  virginica          6.5         3.0         5.55         2.0\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn the Polars code used above, you will notice that we have introduced line breaks. We could have written the whole code on the same line but for the sake of readability I prefer to separate the methods used by line breaks."
  },
  {
    "objectID": "data_manipulation.html#common-data-manipulation-methods",
    "href": "data_manipulation.html#common-data-manipulation-methods",
    "title": "2  Data manipulation",
    "section": "2.5 Common data manipulation methods",
    "text": "2.5 Common data manipulation methods\n\n2.5.1 Conversion between Series/DataFrames and vector/data.frames\n\n2.5.1.1 From vector/data.frames to Series/DataFrames\nThese conversions have already been seen earlier in this book.\n\n# To convert vector to Polars Series\nmyvector &lt;- pl$Series(c(\"a\",\"b\",\"c\"))\n# To convert data.frames to DataFrames\niris_polars &lt;- pl$DataFrame(iris)\n\n\n\n2.5.1.2 From Series/DataFrames to vector/data.frames\nHere, we can use to_r() and to_data_frame() methods.\n\n# To convert Polars Series to vector or list\nmyletters_serie$to_r()\n\n[1] \"a\" \"b\" \"c\"\n\n# To convert DataFrames to data.frames\nmydf$to_data_frame()\n\n  col1 col2\n1    1    a\n2    2    b\n3    3    c\n\n\n\n\n\n2.5.2 Some initial informations on a DataFrame\n\n2.5.2.1 First overview of a DataFrame\nHere is a list of instructions that I frequently use to quickly get information about a DataFrame.\n\n# To get the schema (= a named list)\nmydf$schema\n\n$col1\nDataType: Int32\n\n$col2\nDataType: Utf8\n\n# To get column types as strings. \nmydf$dtype_strings()\n\n[1] \"i32\" \"str\"\n\n# To get an estimation of the total allocated size (in Bytes)\nmydf$estimated_size()\n\n[1] 47\n\n# To get the first n rows\nmydf$head(2)\n\nshape: (2, 2)\n┌──────┬──────┐\n│ col1 ┆ col2 │\n│ ---  ┆ ---  │\n│ i32  ┆ str  │\n╞══════╪══════╡\n│ 1    ┆ a    │\n│ 2    ┆ b    │\n└──────┴──────┘\n\n# To get the dimensions\nmydf$shape\n\n[1] 3 2\n\n\n\n\n2.5.2.2 Count NA over columns in a DataFrame\nThe null_count() method can be used to count NA values of a DataFrame.\n\npolarsR basedplyrdata.table\n\n\n\nmydfNA &lt;- pl$DataFrame(\n  colA = pl$Series(c(\"a\",NA,\"c\")),\n  colB = pl$Series(c(\"d\",NA,NA)))\nmydfNA$null_count()\n\nshape: (1, 2)\n┌──────┬──────┐\n│ colA ┆ colB │\n│ ---  ┆ ---  │\n│ u32  ┆ u32  │\n╞══════╪══════╡\n│ 1    ┆ 2    │\n└──────┴──────┘\n\n\n\n\n\nmydfNA &lt;- data.frame(\n  colA = c(\"a\",NA,\"c\"),\n  colB = c(\"d\",NA,NA))\nsapply(mydfNA, function(x) sum(is.na(x)))\n\ncolA colB \n   1    2 \n\n\n\n\n\nmydfNA %&gt;%\n  summarise(across(everything(), ~sum(is.na(.))))\n\n  colA colB\n1    1    2\n\n\n\n\n\nmydfNA_dt &lt;- as.data.table(mydfNA)\nmydfNA_dt[, lapply(.SD, function(x) sum(is.na(x))), .SDcols = names(mydfNA_dt)]\n\n   colA colB\n1:    1    2\n\n\n\n\n\n\n\n\n2.5.3 Method filter\nThe filter() method is used to filter the rows of a DataFrame. It must be used with the col() method which allows to designate the columns on which the filter condition will be applied.\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$filter(\n  pl$col(\"Petal.Length\") &gt; 6 & pl$col(\"Petal.Width\") &lt; 2)\n\nshape: (2, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡\n│ 7.3          ┆ 2.9         ┆ 6.3          ┆ 1.8         ┆ virginica │\n│ 7.4          ┆ 2.8         ┆ 6.1          ┆ 1.9         ┆ virginica │\n└──────────────┴─────────────┴──────────────┴─────────────┴───────────┘\n\n\n\n\n\niris[iris$Petal.Length &gt; 6 & iris$Petal.Width &lt; 2,] # here don't forget the comma\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n108          7.3         2.9          6.3         1.8 virginica\n131          7.4         2.8          6.1         1.9 virginica\n\n\n\n\n\niris |&gt;\n  filter(Petal.Length &gt; 6 & Petal.Width &lt; 2) \n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n1          7.3         2.9          6.3         1.8 virginica\n2          7.4         2.8          6.1         1.9 virginica\n\n\n\n\n\niris_dt[Petal.Length &gt; 6 & Petal.Width &lt; 2]\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n1:          7.3         2.9          6.3         1.8 virginica\n2:          7.4         2.8          6.1         1.9 virginica\n\n\n\n\n\n\n\n2.5.4 Method select\nThe select() method is used to filter the rows of a DataFrame. It must be used with the col() method which allows to designate the columns to be selected.\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$select(\n  pl$col(c(\"Petal.Length\",\"Petal.Width\"))\n)$head(3) # display the first 3 lines\n\nshape: (3, 2)\n┌──────────────┬─────────────┐\n│ Petal.Length ┆ Petal.Width │\n│ ---          ┆ ---         │\n│ f64          ┆ f64         │\n╞══════════════╪═════════════╡\n│ 1.4          ┆ 0.2         │\n│ 1.4          ┆ 0.2         │\n│ 1.3          ┆ 0.2         │\n└──────────────┴─────────────┘\n\n\n\n\n\niris[1:3,c(\"Petal.Length\",\"Petal.Width\")] \n\n  Petal.Length Petal.Width\n1          1.4         0.2\n2          1.4         0.2\n3          1.3         0.2\n\n\n\n\n\niris |&gt;\n  select(Petal.Length,Petal.Width) |&gt;\n  head(3)\n\n  Petal.Length Petal.Width\n1          1.4         0.2\n2          1.4         0.2\n3          1.3         0.2\n\n\n\n\n\niris_dt[,.(Petal.Length,Petal.Width)]\n\n     Petal.Length Petal.Width\n  1:          1.4         0.2\n  2:          1.4         0.2\n  3:          1.3         0.2\n  4:          1.5         0.2\n  5:          1.4         0.2\n ---                         \n146:          5.2         2.3\n147:          5.0         1.9\n148:          5.2         2.0\n149:          5.4         2.3\n150:          5.1         1.8\n\niris_dt[1:3,]\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1:          5.1         3.5          1.4         0.2  setosa\n2:          4.9         3.0          1.4         0.2  setosa\n3:          4.7         3.2          1.3         0.2  setosa\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to obtain a result in an R data.frame, you can simply add the method to_data_frame() at the end of the method chaining.\n\n\nSimilar to the dplyr package, the select() method can also be used to modify existing data. However, the result will exclude any columns that were not specified in the expression.\nFor example, if we want to get in the data.frame iris the Petal.Length column rounded without decimals.\n\npl$DataFrame(iris)$select(\n  pl$col(\"Petal.Length\")$round(decimals = 0)\n)$head(3) # display the first 3 lines\n\nshape: (3, 1)\n┌──────────────┐\n│ Petal.Length │\n│ ---          │\n│ f64          │\n╞══════════════╡\n│ 1.0          │\n│ 1.0          │\n│ 1.0          │\n└──────────────┘\n\n\nThe problem here is that we would like to keep all the iris columns and not just Petal.Length.\nAgain, let’s look at the official documentation:\n\nTo modify or add some columns—whilst preserving all others in the dataset—it is therefore better to use the with_columns() method.\n\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$with_columns(\n  pl$col(\"Petal.Length\")$round(decimals = 0)\n)$head(3) # display the first 3 lines\n\nshape: (3, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡\n│ 5.1          ┆ 3.5         ┆ 1.0          ┆ 0.2         ┆ setosa  │\n│ 4.9          ┆ 3.0         ┆ 1.0          ┆ 0.2         ┆ setosa  │\n│ 4.7          ┆ 3.2         ┆ 1.0          ┆ 0.2         ┆ setosa  │\n└──────────────┴─────────────┴──────────────┴─────────────┴─────────┘\n\n\n\n\n\niris$Petal.Length &lt;- round(iris$Petal.Length, digits = 0)\niris[1:3,]\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5            1         0.2  setosa\n2          4.9         3.0            1         0.2  setosa\n3          4.7         3.2            1         0.2  setosa\n\n\n\n\n\ndata(iris)\niris |&gt;\n  mutate(Petal.Length = round(Petal.Length,0)) |&gt;\n  head(3)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5            1         0.2  setosa\n2          4.9         3.0            1         0.2  setosa\n3          4.7         3.2            1         0.2  setosa\n\n\n\n\n\niris_dt[,Petal.Length := round(Petal.Length, digits = 0)]\niris_dt[1:3,]\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1:          5.1         3.5            1         0.2  setosa\n2:          4.9         3.0            1         0.2  setosa\n3:          4.7         3.2            1         0.2  setosa\n\n\n\n\n\nIf you want to add a column to a data.frame, you use the same syntax as above with with_columns(). Simply use the alias() method to specify the name of the newly created column.\n\npl$DataFrame(iris)$with_columns(\n  pl$col(\"Petal.Length\")$round(decimals = 0)$alias(\"Petal.Length.rounded\")\n)$head(3) # display the first 3 lines\n\nshape: (3, 6)\n┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┬──────────────────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species ┆ Petal.Length.rounded │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     ┆ ---                  │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     ┆ f64                  │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╪══════════════════════╡\n│ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  ┆ 1.0                  │\n│ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  ┆ 1.0                  │\n│ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  ┆ 1.0                  │\n└──────────────┴─────────────┴──────────────┴─────────────┴─────────┴──────────────────────┘\n\n\n\n\n2.5.5 Methods agg and group_by\nAnother frequently used data manipulation is the aggregation of data by group. To do this, we indicate in the group_by() method which column will be used to group the data.frame. And the agg() method which specifies the expression to aggregate.\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$groupby(\n  \"Species\"\n)$agg(\n  pl$col(c(\"Petal.Length\",\"Petal.Width\"))$sum()\n)\n\nshape: (3, 3)\n┌────────────┬──────────────┬─────────────┐\n│ Species    ┆ Petal.Length ┆ Petal.Width │\n│ ---        ┆ ---          ┆ ---         │\n│ cat        ┆ f64          ┆ f64         │\n╞════════════╪══════════════╪═════════════╡\n│ setosa     ┆ 73.1         ┆ 12.3        │\n│ versicolor ┆ 213.0        ┆ 66.3        │\n│ virginica  ┆ 277.6        ┆ 101.3       │\n└────────────┴──────────────┴─────────────┘\n\n\n\n\n\naggregate(cbind(Petal.Length, Petal.Width) ~ Species, data = iris, FUN = sum)\n\n     Species Petal.Length Petal.Width\n1     setosa         73.1        12.3\n2 versicolor        213.0        66.3\n3  virginica        277.6       101.3\n\n\n\n\n\ndata(iris)\niris |&gt;\n  group_by(Species) |&gt;\n  summarise(across(c(Petal.Length, Petal.Width), sum)) \n\n# A tibble: 3 × 3\n  Species    Petal.Length Petal.Width\n  &lt;fct&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 setosa             73.1        12.3\n2 versicolor        213          66.3\n3 virginica         278.        101. \n\n\n\n\n\niris_dt &lt;- as.data.table(iris)\niris_dt[, .(Petal.Length = sum(Petal.Length), Petal.Width = sum(Petal.Width)), by = Species]\n\n      Species Petal.Length Petal.Width\n1:     setosa         73.1        12.3\n2: versicolor        213.0        66.3\n3:  virginica        277.6       101.3\n\n\n\n\n\n\n\n2.5.6 Method join\nTo perform joins, the join() method must be used.\n\npolarsR basedplyrdata.table\n\n\n\n# First, creation of colors_species Polars DataFrame\ncolors &lt;- pl$DataFrame(\n  Surname = pl$Series(c(\"toto\",\"titi\",\"tata\")),\n  Color = pl$Series(c(\"blue\",\"red\",\"yellow\"))\n)\nvalues &lt;- pl$DataFrame(\n  Surname = pl$Series(c(\"toto\",\"titi\",\"tata\")),\n  value = pl$Series(c(10,20,30))\n)\n# Let's join !\ncolors$join(\n  other = values,\n  on = \"Surname\",\n  how = \"left\"\n)\n\nshape: (3, 3)\n┌─────────┬────────┬───────┐\n│ Surname ┆ Color  ┆ value │\n│ ---     ┆ ---    ┆ ---   │\n│ str     ┆ str    ┆ f64   │\n╞═════════╪════════╪═══════╡\n│ toto    ┆ blue   ┆ 10.0  │\n│ titi    ┆ red    ┆ 20.0  │\n│ tata    ┆ yellow ┆ 30.0  │\n└─────────┴────────┴───────┘\n\n\n\n\n\ncolors &lt;- data.frame(\n  Surname = c(\"toto\",\"titi\",\"tata\"),\n  Color = c(\"blue\",\"red\",\"yellow\")\n)\nvalues &lt;- data.frame(\n  Surname = c(\"toto\",\"titi\",\"tata\"),\n  value = c(10,20,30)\n)\nmerge(colors, values, by = \"Surname\", all.x = TRUE)\n\n  Surname  Color value\n1    tata yellow    30\n2    titi    red    20\n3    toto   blue    10\n\n\n\n\n\ncolors |&gt;\n  left_join(values,\n            by = \"Surname\") \n\n  Surname  Color value\n1    toto   blue    10\n2    titi    red    20\n3    tata yellow    30\n\n\n\n\n\nmerge(as.data.table(colors), \n      as.data.table(values), \n      by = \"Surname\", all.x = TRUE)\n\n   Surname  Color value\n1:    tata yellow    30\n2:    titi    red    20\n3:    toto   blue    10\n\n\n\n\n\n\n\n2.5.7 Others useful methods\n\n2.5.7.1 On Series\n\n2.5.7.1.1 Change name of Series\nThe alias() method is very useful especially in method chaining operation.\nWith R base, the syntax is longer.\n\npolarsR base\n\n\n\npl$Series(1:3, name = \"toto\")$alias(\"titi\")\n\npolars Series: shape: (3,)\nSeries: 'titi' [i32]\n[\n    1\n    2\n    3\n]\n\n\n\n\n\ntoto &lt;- 1:3\ntiti &lt;- toto\nrm(toto)\n\n\n\n\n\n\n2.5.7.1.2 Reduce Boolean Series\nThe all() and any() methods can be used to check if all or any values in a vector evaluate to TRUE for some expression.\n\npolarsR base\n\n\n\n# all(pl$Series(c(TRUE,TRUE))) doesn't work\npl$Series(c(TRUE, TRUE, NA))$all()\n\n[1] FALSE\n\npl$Series(c(TRUE, TRUE, FALSE))$all()\n\n[1] FALSE\n\npl$Series(c(TRUE, TRUE, TRUE))$all()\n\n[1] TRUE\n\n\n\n\n\nall(c(TRUE,TRUE,NA))\n\n[1] NA\n\nall(c(TRUE,TRUE,FALSE))\n\n[1] FALSE\n\nall(c(TRUE,TRUE,TRUE))\n\n[1] TRUE\n\n\n\n\n\n\n\n2.5.7.1.3 Get data type of Series\nThe dtype() method can be used to get data type of Series.\n\npolarsR base\n\n\n\npl$Series(letters)$dtype\n\nDataType: Utf8\n\npl$Series(c(1, 2))$dtype\n\nDataType: Float64\n\npl$DataFrame(iris)$select(\"Species\")$to_series()$dtype\n\nDataType: Categorical(\n    Some(\n        Local(\n            LargeUtf8Array[setosa, versicolor, virginica],\n        ),\n    ),\n)\n\n\n\n\n\ninfer_type(letters)\n\nUtf8\nstring\n\ninfer_type(c(1, 2))\n\nFloat64\ndouble\n\ninfer_type(iris$Species)\n\nDictionaryType\ndictionary&lt;values=string, indices=int8&gt;\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nPolars is strongly typed. print(ls(pl$dtypes)) returns the full list of valid Polars types. Caution, some type names differ from what they are called in R base. See below!\n\n\n\npolarsR base\n\n\n\npl$Series(c(\"x\",\"y\",\"z\"))$dtype\n\nDataType: Utf8\n\npl$Series(c(1, 2, 3))$dtype\n\nDataType: Float64\n\npl$Series(c(1:3))$dtype\n\nDataType: Int32\n\npl$Series(c(TRUE,FALSE))$dtype\n\nDataType: Boolean\n\npl$DataFrame(iris)$select(\"Species\")$to_series()$dtype\n\nDataType: Categorical(\n    Some(\n        Local(\n            LargeUtf8Array[setosa, versicolor, virginica],\n        ),\n    ),\n)\n\npl$Series(Sys.Date())$dtype\n\nDataType: Date\n\npl$Series(c(0,1))$dtype\n\nDataType: Float64\n\n\n\n\n\ntypeof(c(\"x\",\"y\",\"z\"))\n\n[1] \"character\"\n\ntypeof(c(1, 2, 3))\n\n[1] \"double\"\n\ntypeof(c(1:3))\n\n[1] \"integer\"\n\ntypeof(c(TRUE,FALSE))\n\n[1] \"logical\"\n\ntypeof(iris$Species)\n\n[1] \"integer\"\n\ntypeof(Sys.Date())\n\n[1] \"double\"\n\n\n\n\n\nTo summarise the main types between Polars and R:\n\n\n\nPolars\nR Base\n\n\n\n\nUtf8\ncharacter\n\n\nFloat64\ndouble\n\n\nInt32\ninteger\n\n\nBoolean\nlogical\n\n\nCategorical\nFactor\n\n\nDate\nDate\n\n\n\n\n\n2.5.7.1.4 Check if Series is numeric\nThe is_numeric() method can be used to check if Series is numeric.\nNote that unlike R base, there is no method to check if a Series is character (in this case, its type is anyway Utf8).\n\npolarsR base\n\n\n\npl$Series(1:4)$is_numeric()\n\n[1] TRUE\n\npl$Series(c(\"a\", \"b\", \"c\"))$is_numeric()\n\n[1] FALSE\n\n\n\n\n\nis.numeric(1:4)\n\n[1] TRUE\n\nis.numeric(c(\"a\",\"b\",\"c\"))\n\n[1] FALSE\n\n\n\n\n\n\n\n2.5.7.1.5 Check if Series is sorted\nThe is_sorted() method can be used to check if Series is sorted.\nNote that R base provides is.unsorted() which returns the opposite boolean to is_sorted() of Polars.\n\npolarsR base\n\n\n\npl$Series(1:4)$is_sorted()\n\n[1] TRUE\n\npl$Series(c(1,3,2))$is_sorted()\n\n[1] FALSE\n\n\n\n\n\nis.unsorted(1:4)\n\n[1] FALSE\n\nis.unsorted(c(1,3,2))\n\n[1] TRUE\n\n\n\n\n\n\n\n2.5.7.1.6 Get length of a Series\nThe len() method can be used to get the length of a Series.\n\npolarsR base\n\n\n\npl$Series(1:4)$len()\n\n[1] 4\n\n\n\n\n\nlength(1:4)\n\n[1] 4\n\n\n\n\n\n\n\n2.5.7.1.7 Check if Series are equal\nThe series_equal() method can be used to check if a Series is equal with another Series.\n\n\n\n\n\n\nTip\n\n\n\nCaution, if two series are identical but one is named and the other is not then series_equal() returns FALSE.\n\n\n\npolarsR base\n\n\n\npl$Series(1:4)$series_equal(pl$Series(1:4))\n\n[1] TRUE\n\npl$Series(1:4,name = \"toto\")$series_equal(pl$Series(1:4))\n\n[1] FALSE\n\n\n\n\n\nidentical(1:4,1:4)\n\n[1] TRUE\n\n\n\n\n\n\n\n2.5.7.1.8 Convert Series to Polars DataFrame\nThe to_frame() method can be used to convert a Series to a DataFrame.\nIn this case, a DataFrame with only one column will be created. If the Series is initially named then the column of the DataFrame will be named as such.\n\npl$Series(1:3, \"toto\")$to_frame()\n\nshape: (3, 1)\n┌──────┐\n│ toto │\n│ ---  │\n│ i32  │\n╞══════╡\n│ 1    │\n│ 2    │\n│ 3    │\n└──────┘\n\n\n\n\n2.5.7.1.9 Get value Counts of a Series\nThe value_counts() method can be used to get a value counts of a Series.\n\npolarsR basedplyrdata.table\n\n\n\npl$Series(iris$Species)$value_counts()\n\nshape: (3, 2)\n┌────────────┬────────┐\n│            ┆ counts │\n│ ---        ┆ ---    │\n│ cat        ┆ u32    │\n╞════════════╪════════╡\n│ setosa     ┆ 50     │\n│ versicolor ┆ 50     │\n│ virginica  ┆ 50     │\n└────────────┴────────┘\n\n\n\n\n\ntable(iris$Species)\n\n\n    setosa versicolor  virginica \n        50         50         50 \n\n\n\n\n\niris |&gt;\n  count(Species)\n\n     Species  n\n1     setosa 50\n2 versicolor 50\n3  virginica 50\n\n\n\n\n\niris_dt[, .N, by = Species]\n\n      Species  N\n1:     setosa 50\n2: versicolor 50\n3:  virginica 50\n\n\n\n\n\n\n\n\n2.5.7.2 On DataFrames\n\n2.5.7.2.1 Get Series from DataFrame\nThe to_series() method can be used to get one column from DataFrame as Series.\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$select(pl$col(\"Petal.Length\"))$to_series()\n\npolars Series: shape: (150,)\nSeries: 'Petal.Length' [f64]\n[\n    1.4\n    1.4\n    1.3\n    1.5\n    1.4\n    1.7\n    1.4\n    1.5\n    1.4\n    1.5\n    1.5\n    1.6\n    …\n    5.5\n    4.8\n    5.4\n    5.6\n    5.1\n    5.1\n    5.9\n    5.7\n    5.2\n    5.0\n    5.2\n    5.4\n    5.1\n]\n\n\n\n\n\niris$Species\n\n  [1] setosa     setosa     setosa     setosa     setosa     setosa    \n  [7] setosa     setosa     setosa     setosa     setosa     setosa    \n [13] setosa     setosa     setosa     setosa     setosa     setosa    \n [19] setosa     setosa     setosa     setosa     setosa     setosa    \n [25] setosa     setosa     setosa     setosa     setosa     setosa    \n [31] setosa     setosa     setosa     setosa     setosa     setosa    \n [37] setosa     setosa     setosa     setosa     setosa     setosa    \n [43] setosa     setosa     setosa     setosa     setosa     setosa    \n [49] setosa     setosa     versicolor versicolor versicolor versicolor\n [55] versicolor versicolor versicolor versicolor versicolor versicolor\n [61] versicolor versicolor versicolor versicolor versicolor versicolor\n [67] versicolor versicolor versicolor versicolor versicolor versicolor\n [73] versicolor versicolor versicolor versicolor versicolor versicolor\n [79] versicolor versicolor versicolor versicolor versicolor versicolor\n [85] versicolor versicolor versicolor versicolor versicolor versicolor\n [91] versicolor versicolor versicolor versicolor versicolor versicolor\n [97] versicolor versicolor versicolor versicolor virginica  virginica \n[103] virginica  virginica  virginica  virginica  virginica  virginica \n[109] virginica  virginica  virginica  virginica  virginica  virginica \n[115] virginica  virginica  virginica  virginica  virginica  virginica \n[121] virginica  virginica  virginica  virginica  virginica  virginica \n[127] virginica  virginica  virginica  virginica  virginica  virginica \n[133] virginica  virginica  virginica  virginica  virginica  virginica \n[139] virginica  virginica  virginica  virginica  virginica  virginica \n[145] virginica  virginica  virginica  virginica  virginica  virginica \nLevels: setosa versicolor virginica\n\n\n\n\n\niris |&gt;\n  pull(Species)\n\n  [1] setosa     setosa     setosa     setosa     setosa     setosa    \n  [7] setosa     setosa     setosa     setosa     setosa     setosa    \n [13] setosa     setosa     setosa     setosa     setosa     setosa    \n [19] setosa     setosa     setosa     setosa     setosa     setosa    \n [25] setosa     setosa     setosa     setosa     setosa     setosa    \n [31] setosa     setosa     setosa     setosa     setosa     setosa    \n [37] setosa     setosa     setosa     setosa     setosa     setosa    \n [43] setosa     setosa     setosa     setosa     setosa     setosa    \n [49] setosa     setosa     versicolor versicolor versicolor versicolor\n [55] versicolor versicolor versicolor versicolor versicolor versicolor\n [61] versicolor versicolor versicolor versicolor versicolor versicolor\n [67] versicolor versicolor versicolor versicolor versicolor versicolor\n [73] versicolor versicolor versicolor versicolor versicolor versicolor\n [79] versicolor versicolor versicolor versicolor versicolor versicolor\n [85] versicolor versicolor versicolor versicolor versicolor versicolor\n [91] versicolor versicolor versicolor versicolor versicolor versicolor\n [97] versicolor versicolor versicolor versicolor virginica  virginica \n[103] virginica  virginica  virginica  virginica  virginica  virginica \n[109] virginica  virginica  virginica  virginica  virginica  virginica \n[115] virginica  virginica  virginica  virginica  virginica  virginica \n[121] virginica  virginica  virginica  virginica  virginica  virginica \n[127] virginica  virginica  virginica  virginica  virginica  virginica \n[133] virginica  virginica  virginica  virginica  virginica  virginica \n[139] virginica  virginica  virginica  virginica  virginica  virginica \n[145] virginica  virginica  virginica  virginica  virginica  virginica \nLevels: setosa versicolor virginica\n\n\n\n\n\niris_dt[, c(Species)]\n\n  [1] setosa     setosa     setosa     setosa     setosa     setosa    \n  [7] setosa     setosa     setosa     setosa     setosa     setosa    \n [13] setosa     setosa     setosa     setosa     setosa     setosa    \n [19] setosa     setosa     setosa     setosa     setosa     setosa    \n [25] setosa     setosa     setosa     setosa     setosa     setosa    \n [31] setosa     setosa     setosa     setosa     setosa     setosa    \n [37] setosa     setosa     setosa     setosa     setosa     setosa    \n [43] setosa     setosa     setosa     setosa     setosa     setosa    \n [49] setosa     setosa     versicolor versicolor versicolor versicolor\n [55] versicolor versicolor versicolor versicolor versicolor versicolor\n [61] versicolor versicolor versicolor versicolor versicolor versicolor\n [67] versicolor versicolor versicolor versicolor versicolor versicolor\n [73] versicolor versicolor versicolor versicolor versicolor versicolor\n [79] versicolor versicolor versicolor versicolor versicolor versicolor\n [85] versicolor versicolor versicolor versicolor versicolor versicolor\n [91] versicolor versicolor versicolor versicolor versicolor versicolor\n [97] versicolor versicolor versicolor versicolor virginica  virginica \n[103] virginica  virginica  virginica  virginica  virginica  virginica \n[109] virginica  virginica  virginica  virginica  virginica  virginica \n[115] virginica  virginica  virginica  virginica  virginica  virginica \n[121] virginica  virginica  virginica  virginica  virginica  virginica \n[127] virginica  virginica  virginica  virginica  virginica  virginica \n[133] virginica  virginica  virginica  virginica  virginica  virginica \n[139] virginica  virginica  virginica  virginica  virginica  virginica \n[145] virginica  virginica  virginica  virginica  virginica  virginica \nLevels: setosa versicolor virginica\n\n\n\n\n\n\n\n2.5.7.2.2 Get a slice of a DataFrame\nThe to_series() method can be used to get a slice of a DataFrame.\n\n\n\n\n\n\nImportant\n\n\n\nWith Polars, numeric default is 0! Thus the equivalent to slice(1,3) with Polars will be 2:4 in R Base and data.table and slice(1,4) with dplyr.\n\n\n\npolarsR basedplyrdata.table\n\n\n\npl$DataFrame(iris)$slice(1,3)\n\nshape: (3, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡\n│ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │\n│ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │\n│ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │\n└──────────────┴─────────────┴──────────────┴─────────────┴─────────┘\n\n\n\n\n\niris[2:4,]\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n\n\n\n\n\niris |&gt;\n  slice(2:4)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          4.9         3.0          1.4         0.2  setosa\n2          4.7         3.2          1.3         0.2  setosa\n3          4.6         3.1          1.5         0.2  setosa\n\n\n\n\n\niris_dt[2:4,]\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1:          4.9         3.0          1.4         0.2  setosa\n2:          4.7         3.2          1.3         0.2  setosa\n3:          4.6         3.1          1.5         0.2  setosa\n\n\n\n\n\n\n\n2.5.7.2.3 Sort a DataFrame\nThe sort() method can be used to sort a DataFrame.\n\npolarsR basedplyr\n\n\n\n# Sort by one column\npl$DataFrame(iris\n  )$sort(\"Species\"\n  )$head(3)\n\nshape: (3, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡\n│ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │\n│ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │\n│ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │\n└──────────────┴─────────────┴──────────────┴─────────────┴─────────┘\n\n# Sort by two columns\npl$DataFrame(iris\n  )$sort(c(\"Species\",\"Petal.Length\")\n  )$head(3)\n\nshape: (3, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡\n│ 4.6          ┆ 3.6         ┆ 1.0          ┆ 0.2         ┆ setosa  │\n│ 4.3          ┆ 3.0         ┆ 1.1          ┆ 0.1         ┆ setosa  │\n│ 5.8          ┆ 4.0         ┆ 1.2          ┆ 0.2         ┆ setosa  │\n└──────────────┴─────────────┴──────────────┴─────────────┴─────────┘\n\n# Sort by two columns one in a decreasing manner and the other in an increasing manner\npl$DataFrame(iris\n  )$sort(c(\"Species\",\"Petal.Length\"), descending = c(TRUE,FALSE)\n  )$head(3)\n\nshape: (3, 5)\n┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐\n│ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │\n│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │\n│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │\n╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡\n│ 4.9          ┆ 2.5         ┆ 4.5          ┆ 1.7         ┆ virginica │\n│ 6.2          ┆ 2.8         ┆ 4.8          ┆ 1.8         ┆ virginica │\n│ 6.0          ┆ 3.0         ┆ 4.8          ┆ 1.8         ┆ virginica │\n└──────────────┴─────────────┴──────────────┴─────────────┴───────────┘\n\n\n\n\n\n# Sort by one column\niris[order(iris$Species),][1:3,]\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n\n# Sort by two columns\niris[order(iris$Species,iris$Petal.Length),][1:3,]\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n23          4.6         3.6          1.0         0.2  setosa\n14          4.3         3.0          1.1         0.1  setosa\n15          5.8         4.0          1.2         0.2  setosa\n\n# Sort by two columns one in a decreasing manner and the other in an increasing manner\niris[order(rev(iris$Species),iris$Petal.Length),][1:3,]\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n107          4.9         2.5          4.5         1.7 virginica\n127          6.2         2.8          4.8         1.8 virginica\n139          6.0         3.0          4.8         1.8 virginica\n\n\n\n\n\n# Sort by one column\niris |&gt;\n  arrange(Species) |&gt;\n  head(3)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n\n# Sort by two columns\niris |&gt;\n  arrange(Species, Petal.Length) |&gt;\n  head(3)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          4.6         3.6          1.0         0.2  setosa\n2          4.3         3.0          1.1         0.1  setosa\n3          5.8         4.0          1.2         0.2  setosa\n\n# Sort by two columns one in a decreasing manner and the other in an increasing manner\niris |&gt;\n  arrange(desc(Species), Petal.Length) |&gt;\n  head(3)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n1          4.9         2.5          4.5         1.7 virginica\n2          6.2         2.8          4.8         1.8 virginica\n3          6.0         3.0          4.8         1.8 virginica\n\n\n\n\n\n\n\n2.5.7.2.4 Get a structure from a DataFrame\nThe to_struct() method can be used to get a structure from a DataFrame.\n\nmystruc &lt;- mydf$to_struct()\nmystruc\n\npolars Series: shape: (3,)\nSeries: '' [struct[2]]\n[\n    {1,\"a\"}\n    {2,\"b\"}\n    {3,\"c\"}\n]\n\n\nto_struct() returns a Series which can be converted to a R list with to_r method.\n\nmylist &lt;- mystruc$to_r()\nmylist\n\n$col1\n[1] 1 2 3\n\n$col2\n[1] \"a\" \"b\" \"c\"\n\nattr(,\"is_struct\")\n[1] TRUE\n\n\n` mylist is now a list where each element is a column of the initial DataFrame.\nWith to_frame() and unnest() methods, we can reconstruct the original DataFrame:\n\nback_df &lt;- mystruc$to_frame()$unnest()\nback_df\n\nshape: (3, 2)\n┌──────┬──────┐\n│ col1 ┆ col2 │\n│ ---  ┆ ---  │\n│ i32  ┆ str  │\n╞══════╪══════╡\n│ 1    ┆ a    │\n│ 2    ┆ b    │\n│ 3    ┆ c    │\n└──────┴──────┘\n\n\n\n\n\n\n2.5.8 List of methods to apply to Series\nTo learn more about the methods to be applied to the Series, see this page.\n\n# See all exported methods for Series\nls(polars:::Series)\n\n [1] \"abs\"           \"add\"           \"alias\"         \"all\"          \n [5] \"any\"           \"append\"        \"apply\"         \"arg_max\"      \n [9] \"arg_min\"       \"arr\"           \"ceil\"          \"chunk_lengths\"\n[13] \"clone\"         \"compare\"       \"cumsum\"        \"div\"          \n[17] \"dtype\"         \"expr\"          \"flags\"         \"floor\"        \n[21] \"is_numeric\"    \"is_sorted\"     \"len\"           \"max\"          \n[25] \"mean\"          \"median\"        \"min\"           \"mul\"          \n[29] \"name\"          \"print\"         \"rem\"           \"rename\"       \n[33] \"rep\"           \"series_equal\"  \"set_sorted\"    \"shape\"        \n[37] \"sort\"          \"std\"           \"sub\"           \"sum\"          \n[41] \"to_frame\"      \"to_lit\"        \"to_r\"          \"to_r_list\"    \n[45] \"to_r_vector\"   \"to_vector\"     \"value_counts\"  \"var\"          \n\n# See all private methods for Series (not intended for regular use)\nls(polars:::.pr$Series)\n\n [1] \"abs\"                    \"add\"                    \"alias\"                 \n [4] \"all\"                    \"any\"                    \"append_mut\"            \n [7] \"apply\"                  \"arg_max\"                \"arg_min\"               \n[10] \"ceil\"                   \"chunk_lengths\"          \"clone\"                 \n[13] \"compare\"                \"cumsum\"                 \"div\"                   \n[16] \"dtype\"                  \"floor\"                  \"from_arrow\"            \n[19] \"get_fmt\"                \"is_sorted\"              \"is_sorted_flag\"        \n[22] \"is_sorted_reverse_flag\" \"len\"                    \"max\"                   \n[25] \"mean\"                   \"median\"                 \"min\"                   \n[28] \"mul\"                    \"name\"                   \"new\"                   \n[31] \"panic\"                  \"print\"                  \"rem\"                   \n[34] \"rename_mut\"             \"rep\"                    \"series_equal\"          \n[37] \"set_sorted_mut\"         \"shape\"                  \"sleep\"                 \n[40] \"sort_mut\"               \"std\"                    \"sub\"                   \n[43] \"sum\"                    \"to_fmt_char\"            \"to_frame\"              \n[46] \"to_r\"                   \"value_counts\"           \"var\"                   \n\n\n\n\n2.5.9 List of methods to apply to DataFrame\nTo learn more about the methods to be applied to the DataFrames, see this page.\n\n# See all exported methods for DataFrame\nls(polars:::DataFrame)\n\n [1] \"as_data_frame\"  \"clone\"          \"columns\"        \"drop\"          \n [5] \"drop_in_place\"  \"drop_nulls\"     \"dtype_strings\"  \"dtypes\"        \n [9] \"estimated_size\" \"fill_nan\"       \"fill_null\"      \"filter\"        \n[13] \"first\"          \"frame_equal\"    \"get_column\"     \"get_columns\"   \n[17] \"groupby\"        \"head\"           \"height\"         \"join\"          \n[21] \"join_asof\"      \"last\"           \"lazy\"           \"limit\"         \n[25] \"max\"            \"mean\"           \"median\"         \"min\"           \n[29] \"null_count\"     \"print\"          \"quantile\"       \"reverse\"       \n[33] \"schema\"         \"select\"         \"shape\"          \"shift\"         \n[37] \"shift_and_fill\" \"slice\"          \"sort\"           \"std\"           \n[41] \"sum\"            \"tail\"           \"to_data_frame\"  \"to_list\"       \n[45] \"to_series\"      \"to_struct\"      \"unique\"         \"unnest\"        \n[49] \"var\"            \"width\"          \"with_column\"    \"with_columns\"  \n\n# See all private methods for DataFrame (not intended for regular use)\nls(polars:::.pr$DataFrame)\n\n [1] \"by_agg\"                    \"clone_see_me_macro\"       \n [3] \"columns\"                   \"drop_in_place\"            \n [5] \"dtype_strings\"             \"dtypes\"                   \n [7] \"estimated_size\"            \"export_stream\"            \n [9] \"frame_equal\"               \"from_arrow_record_batches\"\n[11] \"get_column\"                \"get_columns\"              \n[13] \"lazy\"                      \"new\"                      \n[15] \"new_par_from_list\"         \"new_with_capacity\"        \n[17] \"null_count\"                \"print\"                    \n[19] \"schema\"                    \"select\"                   \n[21] \"select_at_idx\"             \"set_column_from_robj\"     \n[23] \"set_column_from_series\"    \"set_column_names_mut\"     \n[25] \"shape\"                     \"to_list\"                  \n[27] \"to_list_tag_structs\"       \"to_list_unwind\"           \n[29] \"to_struct\"                 \"unnest\""
  }
]